#!/bin/sh

# This program is an exercise in straining your mind and also messing with
# stdin, stdout, and stderr. For better or for worse, though I think this is
# quite awesome.
#
# What is this program, really? It is supposed to be called by OpenSSH itself,
# rather than the user. Set it as the ProxyCommand in your configuration file.
# When this program is called, it reclaims STDIN so keychain & ssh-agent can
# work. keychain then calls/starts ssh-agent and adds your key. You can call
# this program as many times as you want, it will only ask for your password as
# often as it needs to - which shouldn't be that many times, at all.
#
# You should run `keychain --quiet` in your shell's RC file (e.g. '~/.bashrc' or
# '~/.zshrc', etc) so the agent is started before calling ssh. This is important
# as the environment variables need to be set in the shell calling ssh, adding
# anything to the environment here will not affect ssh at the moment.
#
# Dependencies:
#  * ps -- Standard utility, you probably already have this
#  * (g)awk -- Standard utility, you probably already have this
#  * keychain -- Wrapper around ssh-agent, http://www.gentoo.org/proj/en/keychain/
#
# Example call:
#
#    ssh-intercept %h %p
#
# If you have a custom key file, you need to specify it as the 3rd parameter
# (i.e. if you specify IdentityFile in ~/.ssh/config)
#
#    ssh-intercept %h %p my_custom_key
#
# You can specify just the file, which then will look for it in `~/.ssh`, or you
# specify an absolute path if the key isn't in `~/.ssh`.
#
# NOTE: The first and second parameters are ABSOLUTELY REQUIRED!

DEBUG=""

# $1 = real host to connect to
hostname="$1"
# $2 = port on the remote host
port="$2"
# $3 = the SSH key file name
keyname="${3:-id_rsa}"

if [ -x $(which keychain 2>&1) ] ; then
    # Get the pts device to read stdin from
    pts_term="/dev/$(ps -p$$ --no-heading | awk '{print $2}')"

    alias keychain="keychain --quiet" # Default: Quiet
    if [ -n "$DEBUG" ] ; then
        echo "DEBUG($DEBUG)"
        echo "Host: $1 (port: $2)" 1>&2
        echo "Process ID: $$" 1>&2
        echo "tty stdin: $(tty)" 1>&2
        echo "ps -p\$\$: $(ps -p$$ --no-heading)" 1>&2
        echo "pts: $pts_term" 1>&2
        unalias keychain # Debugging, so be more verbose.
    fi

    # Save the old stdin for later
    exec 3>&0
    # Use the new location, the pts proper for stdin now
    exec < $pts_term

    # There should be another keychain already started, and therefore load it's info
    source ~/.keychain/$HOSTNAME-sh
    # Launch keychain
    keychain --agents ssh --ignore-missing $keyname 1>&2

    # Use the old stdin again, since OpenSSH needs it
    exec <&3
fi

exec nc $hostname $port
