#!/usr/bin/ruby

# Searches the AUR

require 'open-uri'
require 'rubygems'
require 'json'
require 'facets/ansicode'
require 'pp'

#require 'ruby-prof'
#RubyProf.start

# I wish the AUR had an RPC for these, or replaced CategoryID with the name
# instead. The first 'Any' is padding, since the categories start at index
# 1, going through 18, instead of being sensible and starting from 0.
#Categories = %w{Any daemons devel editors emulators games gnome il8n kde kernels lib modules multimedia network office science system x11 xfce kernels}
Categories = %w{nil nil daemons devel editors emulators games gnome i18n kde lib modules multimedia network office science system x11 xfce kernels}
# Defaults from pacman-color
Colors = {"Magenta" => [:bold, :magenta], "White" => [:bold], "Cyan" => [:bold, :cyan], "Blue" => [:bold, :blue], "Yellow" => [:bold, :yellow], "Red" => [:bold, :red], "Green" => [:bold, :green]}
# And support for user modifications. Note that inline comments (ie 
# "White = gray # blah blah") aren't supported and cause this to crash
Colors.merge!(Hash[open("/etc/pacman.d/color.conf").readlines.map(&:strip).reject{|line|line=~ /^#/||line=~ /^$/}.map{|line|a=line.split("=").map(&:strip); [a[0], a[1].sub(/intensive/, "bold").split.map(&:to_sym)]}]) if File.exists? "/etc/pacman.d/color.conf"

def colorful(color, string)
	return string unless $stdout.tty?
	colored = ""
	Colors[color].each do |effect|
		colored << "#{ANSICode.send(effect)}"
	end
	colored << string << "#{ANSICode.clear}"
end	

keywords = ARGV.join(' ')
if keywords == ""
	puts "Please specifiy what to search for as the parameters to this script"
	puts "e.g. #{$0} pacman"
	exit 1
end
json = open("http://aur.archlinux.org/rpc.php?type=search&arg=#{URI.escape(keywords)}").read
hash = JSON.parse(json)
# The most important piece of the code!
if hash["type"] == "search"
	# Alt search orders: [pkg['CategoryID'],pkg['Name']] - ID num, then name
	#                    [Categories[pkg['CategoryID'].to_i],pkg['Name']] - Category name, then pkg name
	hash["results"].sort_by{|pkg|[pkg['Name']]}.each do |pkg|
		next if File.exists? "/var/lib/pacman/sync/community/#{pkg['Name']}-#{pkg['Version']}" # Dir["/var/lib/pacman/sync/community/#{pkg['Name']}-*"].first
		p pkg if $VERBOSE
		name = colorful("White", pkg['Name'])
		name = colorful("Red", name) if pkg["OutOfDate"] == "1"
		if Categories[pkg['CategoryID'].to_i] && Categories[pkg['CategoryID'].to_i] != "nil"
			category = "-#{Categories[pkg['CategoryID'].to_i]}"
		else
			category = ""
		end
		puts <<HERE
#{colorful("Magenta", "aur#{category}")}/#{name} #{colorful("Green",pkg['Version'])}
    #{pkg['Description']}
HERE
		$stdout.flush
	end
end

if File.exists? "/usr/bin/pacman-color"
	exec "/usr/bin/pacman-color -Ss #{keywords}"
else
	exec "/usr/bin/pacman -Ss #{keywords}"
end

#fh = File.open("/tmp/aurs_profile", "w")
#RubyProf::FlatPrinter.new(RubyProf.stop).print(fh, 0)
